{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["calculateYValue","xValue","coefficientStringArray","accumulator","i","Number","Math","pow","console","log","App","props","state","axisParams","equationChange","bind","updateCanvas","resetGraph","paramChange","this","canvasHeight","refs","canvas","height","canvasWidth","width","ctx","getContext","axisDomain","axisRange","axisDomSize","axisRangeSize","canvXToGraphX","canvasXValue","graphXToCanvX","graphXValue","graphYToCanvY","graphYValue","clearRect","setLineDash","beginPath","moveTo","lineTo","stroke","event","newValue","target","value","valueIndex","getAttribute","setState","domainOrRange","className","axisParamIndex","parseInt","type","onChange","power","index","ref","id","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.61c41e39.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst calculateYValue = (xValue, coefficientStringArray) => {\n  // return coefficientStringArray.reduce((total, coeff, index) => {\n  //   return Number(total + (Number(coeff) * Math.pow(xValue, 2 - index)));\n  // })\n  let accumulator = 0;\n\n  for (let i = 0; i < 3; i++) {\n    accumulator = accumulator + (Number(coefficientStringArray[i]) * Math.pow(xValue, i));\n  }\n\n  return accumulator;\n};\n\nconsole.log(calculateYValue(4, [\"1\", \"8\", \"0\"]));\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      coefficientStringArray: [\"0\", \"0\", \"0\"],\n      axisParams: {\n        \"domain\": [-250, 250],\n        \"range\": [-250, 250]\n      }\n    };\n\n    this.equationChange = this.equationChange.bind(this);\n    this.updateCanvas = this.updateCanvas.bind(this);\n    this.resetGraph = this.resetGraph.bind(this);\n    this.paramChange = this.paramChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateCanvas();\n  }\n\n\n  updateCanvas() {\n    const canvasHeight = this.refs.canvas.height;\n    const canvasWidth = this.refs.canvas.width;\n    const ctx = this.refs.canvas.getContext(\"2d\"); \n\n    const axisDomain = this.state.axisParams[\"domain\"];\n    const axisRange = this.state.axisParams[\"range\"];\n\n    const axisDomSize = axisDomain[1] - axisDomain[0];\n    const axisRangeSize = axisRange[1] - axisRange[0];\n\n    const canvXToGraphX = canvasXValue => { return axisDomain[0] + (canvasXValue * (axisDomSize / canvasWidth)) };\n    const graphXToCanvX = graphXValue => { return canvasWidth * ((graphXValue - axisDomain[0]) / axisDomSize) };\n    const graphYToCanvY = graphYValue => { return canvasHeight * (1 - ((graphYValue - axisRange[0]) / axisRangeSize)) };\n\n    if (this.state.coefficientStringArray !== [\"0\", \"0\", \"0\"]) {\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.setLineDash([0, 0]);\n      ctx.beginPath();\n      for (let canvasXValue = 0; canvasXValue < canvasWidth; canvasXValue++) {\n        if (canvasXValue === 0) {\n          ctx.moveTo(canvasXValue, graphYToCanvY(calculateYValue(canvXToGraphX(canvasXValue), this.state.coefficientStringArray)));\n        } else {\n          ctx.lineTo(canvasXValue, graphYToCanvY(calculateYValue(canvXToGraphX(canvasXValue), this.state.coefficientStringArray)));\n        }\n      }\n      ctx.stroke();\n    }\n\n    ctx.setLineDash([3,3]);\n    ctx.beginPath();\n    ctx.moveTo(0, graphYToCanvY(0));\n    ctx.lineTo(canvasWidth,graphYToCanvY(0));\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.moveTo(graphXToCanvX(0), 0);\n    ctx.lineTo(graphXToCanvX(0), canvasHeight);\n    ctx.stroke();\n  }\n  \n  equationChange(event) {\n    const newValue = event.target.value;\n    const valueIndex = event.target.getAttribute(\"power\");\n    \n    let coefficientStringArray = this.state.coefficientStringArray;\n    coefficientStringArray[valueIndex] = newValue\n\n    this.setState({coefficientStringArray: coefficientStringArray}, () => {\n      this.updateCanvas();\n    })\n  }\n\n  paramChange(event) {\n    const newValue = Number(event.target.value);\n    const domainOrRange = event.target.className;\n    const axisParamIndex = parseInt(event.target.getAttribute(\"index\"))\n    let axisParams = this.state.axisParams;\n\n    if ((axisParamIndex === 0 && (newValue < axisParams[domainOrRange][1])) || (axisParamIndex === 1 && (newValue > axisParams[domainOrRange][0]))) {    \n      axisParams[domainOrRange][axisParamIndex] = newValue;\n\n      this.setState({axisParams: axisParams}, () => { \n        this.updateCanvas();\n      })\n    }\n  }\n  \n  resetGraph() {\n    this.setState({\n      coefficientStringArray: [\"0\", \"0\", \"0\"],\n      axisParams: {\n        \"domain\": [-250, 250],\n        \"range\": [-250, 250]\n      }\n    }, () => { this.updateCanvas() })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Graphing Calculator</h1>\n        <span>y=\n          <input type=\"number\" onChange={this.equationChange} value={this.state.coefficientStringArray[2]} power={2} />x<sup>2</sup> + \n          <input type=\"number\" onChange={this.equationChange} value={this.state.coefficientStringArray[1]} power={1} />x + \n          <input type=\"number\" onChange={this.equationChange} value={this.state.coefficientStringArray[0]} power={0} />\n        </span>\n        <span>Domain: [ \n          <input type=\"number\" className=\"domain\" onChange={this.paramChange} value={this.state.axisParams[\"domain\"][0]} index={0} />, \n          <input type=\"number\" className=\"domain\" onChange={this.paramChange} value={this.state.axisParams[\"domain\"][1]} index={1} /> \n        ]</span>\n        <span>Range: [ \n          <input type=\"number\" className=\"range\" onChange={this.paramChange} value={this.state.axisParams[\"range\"][0]} index={0} />, \n          <input type=\"number\" className=\"range\" onChange={this.paramChange} value={this.state.axisParams[\"range\"][1]} index={1} /> \n        ]</span>\n\n        <canvas ref=\"canvas\" height={500} width={500}/>\n        <div id=\"reset-button\">\n          <button onClick={this.resetGraph} >Clear graph</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}