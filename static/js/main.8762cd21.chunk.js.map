{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","calculateYValue","xValue","coefficientArray","reduce","total","coeff","index","Number","Math","pow","App","props","state","coefficientStringArray","equationChange","bind","updateCanvas","resetGraph","canvasHeight","this","refs","canvas","height","canvasWidth","width","ctx","getContext","setLineDash","beginPath","moveTo","lineTo","stroke","coordArray","i","coordPair","map","item","push","clearRect","forEach","event","newValue","target","value","valueIndex","getAttribute","setState","className","type","onChange","power","ref","id","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8762cd21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst calculateYValue = (xValue, coefficientArray) => {\n  return coefficientArray.reduce((total, coeff, index) => {\n    return Number(total + (coeff * Math.pow(xValue, index)));\n  })\n};\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      coefficientStringArray: [\"0\", \"0\", \"0\"]\n    };\n\n    this.equationChange = this.equationChange.bind(this);\n    this.updateCanvas = this.updateCanvas.bind(this);\n    this.resetGraph = this.resetGraph.bind(this);\n  }\n\n  componentDidMount() {\n    const canvasHeight = this.refs.canvas.height;\n    const canvasWidth = this.refs.canvas.width;\n    const ctx = this.refs.canvas.getContext(\"2d\");\n\n    ctx.setLineDash([3,3]);\n    ctx.beginPath();\n    ctx.moveTo(canvasWidth / 2, 0);\n    ctx.lineTo(canvasWidth / 2, canvasHeight);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.moveTo(0, canvasHeight / 2);\n    ctx.lineTo(canvasWidth, canvasHeight / 2);\n    ctx.stroke();\n  }\n\n  updateCanvas(coefficientStringArray) {\n    const canvasHeight = this.refs.canvas.height;\n    const canvasWidth = this.refs.canvas.width;\n\n\n    let coordArray = [];\n      for (var i = 0; i < canvasWidth; i++) {\n        // const coordPair = [i - canvasWidth / 2, calculateYValue(i - canvasWidth / 2, coefficientStringArray)];\n        const coordPair = [i - canvasWidth / 2, calculateYValue(i - canvasWidth / 2, coefficientStringArray.map(item => Number(item)))]\n        coordArray.push(coordPair);\n      }\n\n    const ctx = this.refs.canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    \n    ctx.setLineDash([0,0]);\n    ctx.beginPath();\n    coordArray.forEach((coordPair, index) => {\n      if (index === 1) {\n        ctx.moveTo(coordPair[0] + 250, canvasHeight - (coordPair[1] + 250))\n      } else {\n        ctx.lineTo(coordPair[0] + 250, canvasHeight - (coordPair[1] + 250))\n      }\n    })\n    ctx.stroke();\n\n    ctx.setLineDash([3,3]);\n    ctx.beginPath();\n    ctx.moveTo(canvasWidth / 2, 0);\n    ctx.lineTo(canvasWidth / 2, canvasHeight);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.moveTo(0, canvasHeight / 2);\n    ctx.lineTo(canvasWidth, canvasHeight / 2);\n    ctx.stroke();\n  }\n  \n  equationChange(event) {\n    const newValue = event.target.value;\n    const valueIndex = event.target.getAttribute(\"power\");\n    \n    let coefficientStringArray = this.state.coefficientStringArray;\n    coefficientStringArray[valueIndex] = newValue\n\n    this.setState({coefficientStringArray: coefficientStringArray}, () => {\n      this.updateCanvas(coefficientStringArray);\n    })\n  }\n  \n  resetGraph() {\n    this.setState({\n      coefficientStringArray: [\"0\", \"0\", \"0\"]\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Graphing Calculator</h1>\n        <span>y=\n          <input type=\"number\" onChange={this.equationChange} value={this.state.coefficientStringArray[2]} power={2} />x<sup>2</sup> + \n          <input type=\"number\" onChange={this.equationChange} value={this.state.coefficientStringArray[1]} power={1} />x + \n          <input type=\"number\" onChange={this.equationChange} value={this.state.coefficientStringArray[0]} power={0} />\n        </span>\n        <canvas ref=\"canvas\" height={500} width={500}  coefficientStringArray={this.state.coefficientStringArray} />\n        <div id=\"reset-button\">\n          <button onClick={this.resetGraph} >Clear graph</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}